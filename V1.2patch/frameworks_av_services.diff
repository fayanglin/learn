diff --git a/services/audioflinger/Android.mk b/services/audioflinger/Android.mk
index f0196c6..743c8a0 100755
--- a/services/audioflinger/Android.mk
+++ b/services/audioflinger/Android.mk
@@ -82,7 +82,9 @@ else
 endif
 
 LOCAL_CFLAGS += -fvisibility=hidden
-
+ifeq ($(TARGET_PRODUCT), rk322x_echo)
+LOCAL_CFLAGS += -DTEST
+endif
 include $(BUILD_SHARED_LIBRARY)
 
 #
diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index 4c90be5..0d247c5 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -4990,7 +4990,13 @@ AudioFlinger::RecordThread::RecordThread(const sp<AudioFlinger>& audioFlinger,
                 ((primaryOutputSampleRate == 0) &&
                     ((mSampleRate == 44100 || mSampleRate == 48000)))) &&
                 // and the buffer size is < 12 ms
+#ifdef TEST
+                ((mFrameCount * 1000) / mSampleRate < 12) &&
+                // and input device is not a2dp
+                !audio_is_a2dp_in_device(inDevice);
+#else
                 (mFrameCount * 1000) / mSampleRate < 12;
+#endif
         break;
     // case FastCapture_Dynamic:
     }
diff --git a/services/audiopolicy/AudioPolicyManager.cpp b/services/audiopolicy/AudioPolicyManager.cpp
index 6c1b13a..02f3821 100755
--- a/services/audiopolicy/AudioPolicyManager.cpp
+++ b/services/audiopolicy/AudioPolicyManager.cpp
@@ -832,7 +832,7 @@ void AudioPolicyManager::setForceUse(audio_policy_force_use_t usage,
 
     audio_io_handle_t activeInput = getActiveInput();
     if (activeInput != 0) {
-        setInputDevice(activeInput, getNewInputDevice(activeInput));
+     //   setInputDevice(activeInput, getNewInputDevice(activeInput));
     }
 
 }
@@ -1584,6 +1584,32 @@ status_t AudioPolicyManager::getInputForAttr(const audio_attributes_t *attr,
         return NO_INIT;
     }
 
+    // check whether available input is existed or not
+    if (mInputs.size() > 0) {
+        sp<AudioInputDescriptor> inputDesc = 0;
+        for (size_t i = 0; i < mInputs.size(); i++){
+            inputDesc = mInputs.valueAt(i);
+            if (inputDesc->mProfile == profile) {
+                // found the available input
+                *input = mInputs.keyAt(i);
+                break;
+            }
+        }
+
+        if (inputDesc == 0) {
+            ALOGV("getInputForAttr(): no available input exist, open new input!!!");
+        } else if(inputDesc != 0 && *input != 0  ) {
+	    ALOGW("getInputForAttr(): already exists available input %d, *input:%d", inputDesc->mIoHandle,*input );
+            // update the input descriptor information.
+            inputDesc->mOpenRefCount++;
+            inputDesc->mSessions.add(session);
+            return NO_ERROR;
+        } else {
+		inputDesc = 0;
+        }
+    }
+
+
     audio_config_t config = AUDIO_CONFIG_INITIALIZER;
     config.sample_rate = samplingRate;
     config.channel_mask = channelMask;
@@ -1662,7 +1688,7 @@ status_t AudioPolicyManager::startInput(audio_io_handle_t input,
                 releaseInput(activeInput, activeDesc->mSessions.itemAt(0));
             } else {
                 ALOGE("startInput(%d) failed: other input %d already started", input, activeInput);
-                return INVALID_OPERATION;
+               // return INVALID_OPERATION;
             }
         }
     }
@@ -5320,9 +5346,11 @@ audio_devices_t AudioPolicyManager::getDeviceForInputSource(audio_source_t input
 
     case AUDIO_SOURCE_DEFAULT:
     case AUDIO_SOURCE_MIC:
-    if (availableDeviceTypes & AUDIO_DEVICE_IN_BLUETOOTH_A2DP) {
+/*    if (availableDeviceTypes & AUDIO_DEVICE_IN_BLUETOOTH_A2DP) {
         device = AUDIO_DEVICE_IN_BLUETOOTH_A2DP;
-    } else if ((mForceUse[AUDIO_POLICY_FORCE_FOR_RECORD] == AUDIO_POLICY_FORCE_BT_SCO) &&
+    } else
+*/ 
+    if ((mForceUse[AUDIO_POLICY_FORCE_FOR_RECORD] == AUDIO_POLICY_FORCE_BT_SCO) &&
         (availableDeviceTypes & AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET)) {
         device = AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET;
     } else if (availableDeviceTypes & AUDIO_DEVICE_IN_WIRED_HEADSET) {
@@ -5333,7 +5361,12 @@ audio_devices_t AudioPolicyManager::getDeviceForInputSource(audio_source_t input
         device = AUDIO_DEVICE_IN_BUILTIN_MIC;
     }
     break;
-
+    case 11://AUDIO_SOURCE_BLUETOOTH_A2DP:
+	ALOGE("AUDIO_SOURCE_BLUETOOTH_A2DP() availableDeviceTypes:%x", availableDeviceTypes);
+	if (availableDeviceTypes & AUDIO_DEVICE_IN_BLUETOOTH_A2DP) {
+		device = AUDIO_DEVICE_IN_BLUETOOTH_A2DP;
+	}
+	break;
     case AUDIO_SOURCE_VOICE_COMMUNICATION:
         // Allow only use of devices on primary input if in call and HAL does not support routing
         // to voice call path.
